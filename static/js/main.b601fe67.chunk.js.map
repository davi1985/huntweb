{"version":3,"sources":["services/api.js","pages/main/index.js","pages/product/index.js","routes.js","components/Header/index.js","App.js","serviceWorker.js","index.js"],"names":["api","axios","create","baseURL","Main","state","products","productInfo","page","loadProducts","_callee","response","_response$data","docs","_args","arguments","regenerator_default","a","wrap","_context","prev","next","length","undefined","get","concat","sent","data","Object","objectWithoutProperties","_this","setState","stop","this","prevPage","_this$state","pageNumber","nextPage","_this$state2","pages","_this$state3","react_default","createElement","className","map","product","key","_id","title","description","Link","to","disabled","onClick","Component","Product","id","props","match","params","href","url","Routes","HashRouter","Switch","Route","exact","path","component","Header","App","components_Header","routes","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kWAIeA,SAFHC,EAAMC,OAAO,CAAEC,QAAS,sDCIfC,oNACpBC,MAAQ,CACPC,SAAU,GACVC,YAAa,GACbC,KAAM,KAMPC,kCAAe,SAAAC,IAAA,IAAAF,EAAAG,EAAAC,EAAAC,EAAAN,EAAAO,EAAAC,UAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAOb,EAAPM,EAAAQ,OAAA,QAAAC,IAAAT,EAAA,GAAAA,EAAA,GAAc,EAAdK,EAAAE,KAAA,EACSrB,EAAIwB,IAAJ,kBAAAC,OAA0BjB,IADnC,OACRG,EADQQ,EAAAO,KAAAd,EAGkBD,EAASgB,KAAjCd,EAHMD,EAGNC,KAASN,EAHHqB,OAAAC,EAAA,EAAAD,CAAAhB,EAAA,UAKdkB,EAAKC,SAAS,CAAEzB,SAAUO,EAAMN,cAAaC,SAL/B,wBAAAW,EAAAa,SAAAtB,EAAAuB,WASfC,SAAW,WAAM,IAAAC,EACaL,EAAKzB,MAA1BG,EADQ2B,EACR3B,KADQ2B,EACF5B,YAEd,GAAY,IAATC,EAAH,CAEA,IAAM4B,EAAa5B,EAAM,EAEzBsB,EAAKrB,aAAa2B,OAGnBC,SAAW,WAAM,IAAAC,EACaR,EAAKzB,MAA1BG,EADQ8B,EACR9B,KAER,GAAGA,IAHa8B,EACF/B,YAEUgC,MAAxB,CAEA,IAAMH,EAAa5B,EAAO,EAE1BsB,EAAKrB,aAAa2B,wFA7BlBH,KAAKxB,gDAgCG,IAAA+B,EACgCP,KAAK5B,MAArCC,EADAkC,EACAlC,SAAUE,EADVgC,EACUhC,KAAMD,EADhBiC,EACgBjC,YACxB,OAECkC,EAAAxB,EAAAyB,cAAA,OAAKC,UAAU,gBAEbrC,EAASsC,IAAI,SAAAC,GAAO,OACpBJ,EAAAxB,EAAAyB,cAAA,WAASI,IAAKD,EAAQE,KACrBN,EAAAxB,EAAAyB,cAAA,cAASG,EAAQG,OACjBP,EAAAxB,EAAAyB,cAAA,SAAIG,EAAQI,aAEZR,EAAAxB,EAAAyB,cAACQ,EAAA,EAAD,CAAMC,GAAE,aAAA1B,OAAeoB,EAAQE,MAA/B,cAKFN,EAAAxB,EAAAyB,cAAA,OAAKC,UAAU,WACdF,EAAAxB,EAAAyB,cAAA,UAAQU,SAAmB,IAAT5C,EAAY6C,QAASpB,KAAKC,UAA5C,YACAO,EAAAxB,EAAAyB,cAAA,UAAQU,SAAU5C,IAASD,EAAYgC,MAAOc,QAASpB,KAAKI,UAA5D,uBAzD6BiB,cCDbC,oNACnBlD,MAAQ,CACNwC,QAAS,8MAIDW,EAAOvB,KAAKwB,MAAMC,MAAMC,OAAxBH,YAEexD,EAAIwB,IAAJ,aAAAC,OAAqB+B,WAAtC7C,SAENsB,KAAKF,SAAS,CAAEc,QAASlC,EAASgB,0IAE3B,IACCkB,EAAYZ,KAAK5B,MAAjBwC,QAER,OACEJ,EAAAxB,EAAAyB,cAAA,OAAKC,UAAU,gBACbF,EAAAxB,EAAAyB,cAAA,UAAKG,EAAQG,OACbP,EAAAxB,EAAAyB,cAAA,SAAIG,EAAQI,aAEZR,EAAAxB,EAAAyB,cAAA,iBACOD,EAAAxB,EAAAyB,cAAA,KAAGkB,KAAMf,EAAQgB,KAAMhB,EAAQgB,cArBTP,cCWtBQ,EATA,kBACbrB,EAAAxB,EAAAyB,cAACqB,EAAA,EAAD,KACEtB,EAAAxB,EAAAyB,cAACsB,EAAA,EAAD,KACEvB,EAAAxB,EAAAyB,cAACuB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWhE,IACjCqC,EAAAxB,EAAAyB,cAACuB,EAAA,EAAD,CAAOE,KAAK,gBAAgBC,UAAWb,OCN9Bc,eAFA,kBAAM5B,EAAAxB,EAAAyB,cAAA,UAAQc,GAAG,eAAX,YCaNc,EARH,kBACV7B,EAAAxB,EAAAyB,cAAA,OAAKC,UAAU,OACbF,EAAAxB,EAAAyB,cAAC6B,EAAD,MACA9B,EAAAxB,EAAAyB,cAAC8B,EAAD,QCCgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASlB,MACvB,2DCZNmB,IAASC,OAAOrC,EAAAxB,EAAAyB,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b601fe67.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst api = axios.create({ baseURL: 'https://rocketseat-node.herokuapp.com/api' });\n\nexport default api;","import React, { Component } from 'react';\nimport api from '../../services/api';\nimport { Link } from 'react-router-dom';\n\nimport './styles.css';\n\nexport default class Main extends Component {\n\tstate = {\n\t\tproducts: [],\n\t\tproductInfo: {},\n\t\tpage: 1,\n\t}\n\tcomponentDidMount() {\n\t\tthis.loadProducts();\n\t}\n\n\tloadProducts = async (page = 1) => {\n\t\tconst response = await api.get(`/products?page=${page}`);\n\n\t\tconst { docs, ...productInfo} = response.data;\n\n\t\tthis.setState({ products: docs, productInfo, page });\n\t};\n\n\t// Funçoes Paginação\n\tprevPage = () => {\n\t\tconst { page, productInfo} = this.state;\n\n\t\tif(page === 1) return;\n\n\t\tconst pageNumber = page -1;\n\n\t\tthis.loadProducts(pageNumber);\n\t}\n\t\n\tnextPage = () => {\n\t\tconst { page, productInfo} = this.state;\n\n\t\tif(page === productInfo.pages) return;\n\n\t\tconst pageNumber = page + 1;\n\n\t\tthis.loadProducts(pageNumber);\n\t}\n\n\trender() {\n\t\tconst { products, page, productInfo } = this.state;\n\t\treturn (\n\n\t\t\t<div className=\"product-list\">\n\t\t\t{/* Listagem de produtos */}\n\t\t\t\t{products.map(product => (\n\t\t\t\t\t<article key={product._id}>\n\t\t\t\t\t\t<strong>{product.title}</strong>\n\t\t\t\t\t\t<p>{product.description}</p>\n\n\t\t\t\t\t\t<Link to={`/products/${product._id}`}>Acessar</Link>\n\t\t\t\t\t</article>\n\t\t\t\t))}\n\t\t\t\t\n\t\t\t\t{/* Paginação */}\n\t\t\t\t<div className=\"actions\">\n\t\t\t\t\t<button disabled={page === 1} onClick={this.prevPage}>Anterior</button>\n\t\t\t\t\t<button disabled={page === productInfo.pages} onClick={this.nextPage}>Próxima</button>\n\t\t\t\t</div>\n\t\t\t\t \n\t\t\t</div>\n\t\t);\n\t}\n}","import React, { Component } from 'react';\nimport api from '../../services/api';\n\nimport './styles.css';\n\nexport default class Product extends Component {\n  state = {\n    product: {},\n  };\n\n  async componentDidMount() {\n    const { id } = this.props.match.params;\n    \n    const response = await api.get(`/products/${id}`);\n\n    this.setState({ product: response.data });\n  }\n  render() {\n    const { product } = this.state;\n  \n    return (\n      <div className=\"product-info\">\n        <h1>{product.title}</h1>\n        <p>{product.description}</p>\n\n        <p>\n          URL: <a href={product.url}>{product.url}</a>\n        </p>\n      </div>\n    )\n  }\n}","import React from 'react';\n\nimport { HashRouter, Switch, Route} from 'react-router-dom';\n\nimport Main from './pages/main';\nimport Product from './pages/product';\n\nconst Routes = () => (\n  <HashRouter>\n    <Switch>\n      <Route exact path='/' component={Main} />\n      <Route path='/products/:id' component={Product} />\n    </Switch>\n  </HashRouter>\n);\n\nexport default Routes;","import React from 'react';\n\nimport './styles.css';\nconst Header = () => <header id=\"main-header\">JSHunt</header>\n\nexport default Header;","import React, { Component } from 'react';\nimport Routes from './routes';\n\nimport './styles.css';\n\nimport Header from './components/Header';\nimport Main from './pages/main';\n\nconst App = () => (\n  <div className=\"App\">\n    <Header />\n    <Routes />\n  </div>\n);\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}